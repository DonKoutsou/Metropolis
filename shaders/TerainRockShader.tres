[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;
render_mode cull_disabled, shadows_disabled;

uniform sampler2D u_terrain_heightmap;
uniform sampler2D u_terrain_detailmap;
uniform sampler2D u_terrain_normalmap;
uniform sampler2D u_terrain_globalmap : hint_albedo;
uniform mat4 u_terrain_inverse_transform;
uniform mat3 u_terrain_normal_basis;

uniform sampler2D surfaceNoise;

uniform sampler2D u_albedo_alpha : hint_albedo;
uniform float u_view_distance = 100.0;
uniform float u_globalmap_tint_bottom : hint_range(0.0, 1.0);
uniform float u_globalmap_tint_top : hint_range(0.0, 1.0);
uniform float u_bottom_ao : hint_range(0.0, 1.0);
uniform vec2 u_ambient_wind; // x: amplitude, y: time
uniform vec3 u_instance_scale = vec3(1.0, 1.0, 1.0);

varying vec3 v_normal;
varying vec2 v_map_uv;

uniform vec2 seed = vec2( 0.0, 0.0 );
uniform float factor : hint_range( 0.0, 1.0 ) = 0.0;

float get_hash(vec2 c) {
	return fract(sin(dot(c.xy, vec2(12.9898,78.233))) * 43758.5453);
}
vec2 random( vec2 pos )
{ 
	return clamp( fract(
		sin(
			vec2(
				dot(pos, vec2(12.9898,78.233))
			,	dot(pos, vec2(-148.998,-65.233))
			) + seed
		) * 43758.5453
	) - vec2( factor ), vec2( 0.0 ), vec2( 1.0 ) );
}

void vertex() {
	//vec2 origin_uv = floor( UV * u_instance_scale );
	//#vec2 right_uv = origin_uv + vec2( 1.0, 0.0 );
	//#vec2 down_uv = origin_uv + vec2( 0.0, 1.0 );

	//vec2 origin_tile = step( 0.5, random( origin_uv ) );
	//vec2 right_tile = step( 0.5, random( right_uv ) );
	//vec2 down_tile = step( 0.5, random( down_uv ) );

	//vec2 tile_uv = vec2(
	//	mix( right_tile.x, 3.0 - right_tile.x, origin_tile.x )
	//,	3.0 + mix( down_tile.y, 3.0 - down_tile.y, origin_tile.y )
	//) * 0.25 + ( fract( UV * u_instance_scale ) * 0.25 );

	vec4 obj_pos = WORLD_MATRIX * vec4(0, 1, 0, 1);
	vec3 cell_coords = (u_terrain_inverse_transform * obj_pos).xyz;
	// Must add a half-offset so that we sample the center of pixels,
	// otherwise bilinear filtering of the textures will give us mixed results (#183)
	cell_coords.xz += vec2(0.5);
	
	vec2 map_uv = cell_coords.xz / vec2(textureSize(u_terrain_heightmap, 0));
	v_map_uv = map_uv;

	//float density = 0.5 + 0.5 * sin(4.0*TIME); // test
	float density = texture(u_terrain_detailmap, map_uv).r;
	float hash = get_hash(obj_pos.xz);
	
	if (density > hash) {
		
		// Snap model to the terrain
		float height = texture(u_terrain_heightmap, map_uv).r / cell_coords.y;
		VERTEX *= u_instance_scale;
		
		vec2 tex_position = VERTEX.xz;
		float surfaceNoiseSample = texture(surfaceNoise, vec2(obj_pos.xz * map_uv)).r;
		
		VERTEX *= surfaceNoiseSample * 2.0;
		VERTEX.y += height - 0.03;
		// Fade alpha with distance
		vec3 wpos = (WORLD_MATRIX * vec4(VERTEX, 1)).xyz;
		float dr = distance(wpos, CAMERA_MATRIX[3].xyz) / u_view_distance;
		COLOR.a = clamp(1.0 - dr * dr * dr, 0.0, 1.0);
		//COLOR.rgb *= surfaceNoiseSample

	} else {
		// Discard, output degenerate triangles
		VERTEX = vec3(0, 0, 0);
	}
}

void fragment() {
	NORMAL = (INV_CAMERA_MATRIX * (WORLD_MATRIX * vec4(v_normal, 0.0))).xyz;
	ALPHA_SCISSOR = 0.5;
	ROUGHNESS = 1.0;
	METALLIC = 0.0;

	vec4 col = texture(u_albedo_alpha, UV);
	ALPHA = col.a * COLOR.a;// - clamp(1.4 - UV.y, 0.0, 1.0);//* 0.5 + 0.5*cos(2.0*TIME);
	
	ALBEDO = COLOR.rgb * col.rgb;

	// Blend with ground color
	//float nh = sqrt(1.0 - UV.y);
	ALBEDO = mix(ALBEDO, texture(u_terrain_globalmap, v_map_uv).rgb, mix(u_globalmap_tint_bottom, u_globalmap_tint_top, 0.1));
	
	// Fake bottom AO
	ALBEDO = ALBEDO * mix(1.0, 1.0 - u_bottom_ao, UV.y * UV.y);
}
"

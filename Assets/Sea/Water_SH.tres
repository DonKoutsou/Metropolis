[gd_resource type="ShaderMaterial" load_steps=5 format=2]

[ext_resource path="res://Assets/Sea/Water_N_A.png" type="Texture" id=1]
[ext_resource path="res://Assets/Sea/raindrops.png" type="Texture" id=2]
[ext_resource path="res://Assets/Sea/Water_N_B.png" type="Texture" id=3]

[sub_resource type="Shader" id=6]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.3.stable.mono's SpatialMaterial.

shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_always,cull_disabled,diffuse_burley,specular_schlick_ggx;

uniform bool IsRaining = false;

uniform vec4 albedo : hint_color;
uniform vec4 ring_color : hint_color;
uniform vec4 _DepthGradientShallow: hint_color = vec4(0.325, 0.807, 0.971, 0.725);
//uniform sampler2D texture_albedo : hint_albedo;

uniform float specular;
uniform float metallic;
uniform float proximity_fade_distance;
uniform float roughness : hint_range(0,1);
//uniform float point_size : hint_range(0,128);
//uniform sampler2D texture_refraction;
uniform float refraction : hint_range(-16,16);
//uniform vec4 refraction_texture_channel;
//uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);


uniform float beer_factor = 0.8;

uniform float _DepthMaxDistance: hint_range(0, 2) = 1.0;
uniform float _DepthFactor = 1.0;


uniform float ring_width : hint_range(0.0, 1.0) = 0.1;
uniform float fadeout : hint_range(0.0, 1.0) = 0.2;
uniform sampler2D pattern;


uniform sampler2D uv_sampler ; 						// UV motion sampler for shifting the normalmap
uniform vec2 	uv_sampler_scale = vec2(0.25, 0.25); 			// UV sampler scale
uniform float 	uv_sampler_strength = 0.04; 					// UV shifting strength


uniform sampler2D normalmap_a_sampler : hint_normal;			// Normalmap sampler A
uniform sampler2D normalmap_b_sampler : hint_normal;			// Normalmap sampler B

//uniform sampler2D uv_sampler : hint_aniso; 						// UV motion sampler for shifting the normalmap
//uniform vec2 	uv_sampler_scale = vec2(0.25, 0.25); 			// UV sampler scale
//uniform float 	uv_sampler_strength = 0.04; 					// UV shifting strength
uniform vec2	sampler_direction= vec2(0.05, 0.04); 			// Direction and speed for the sampler offset
uniform vec2 uv1_scale;
uniform vec2 uv1_offset;
//uniform vec3 uv2_scale;
//uniform vec3 uv2_offset;

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}
vec2 rotate(vec2 uv, vec2 pivot, float angle)
{
	mat2 rotation = mat2(vec2(sin(angle), -cos(angle)),
						vec2(cos(angle), sin(angle)));
	
	uv -= pivot;
	uv = uv * rotation;
	uv += pivot;
	return uv;
}
float rand(){
    return fract(sin(dot(vec2(0,0) ,vec2(12.9898,78.233))) * 43758.5453);
}
void triangle_grid( vec2 uv, out float w1, out float w2, out float w3, out ivec2 vertex1, out ivec2 vertex2, out ivec2 vertex3 )
{
	uv *= 3.464;	// 2 * sqrt(3)

	vec2 skewed_coord = mat2( vec2( 1.0, 0.0 ), vec2( -0.57735027, 1.15470054 ) ) * uv;
	ivec2 base_id = ivec2( floor( skewed_coord ) );
	vec3 temp = vec3( fract( skewed_coord ), 0.0 );
	temp.z = 1.0 - temp.x - temp.y;

	if( 0.0 < temp.z ) {
		w1 = temp.z;
		w2 = temp.y;
		w3 = temp.x;
		vertex1 = base_id;
		vertex2 = base_id + ivec2( 0, 1 );
		vertex3 = base_id + ivec2( 1, 0 );
	}else {
		w1 = -temp.z;
		w2 = 1.0 - temp.y;
		w3 = 1.0 - temp.x;
		vertex1 = base_id + ivec2( 1, 1 );
		vertex2 = base_id + ivec2( 1, 0 );
		vertex3 = base_id + ivec2( 0, 1 );
	}
}

vec2 hash( vec2 p )
{
	return fract( sin( p * mat2( vec2( 127.1, 311.7 ), vec2( 269.5, 183.3 ) ) ) * 43758.5453 );
}

vec3 by_example_procedural_noise( vec2 uv)
{
	float w1, w2, w3;
	ivec2 vertex1, vertex2, vertex3;
	triangle_grid( uv, w1, w2, w3, vertex1, vertex2, vertex3 );

	vec2 uv1 = uv + hash( vec2( vertex1 ) );
	vec2 uv2 = uv + hash( vec2( vertex2 ) );
	vec2 uv3 = uv + hash( vec2( vertex3 ) );

	vec2 duvdx = dFdx( uv );
	vec2 duvdy = dFdy( uv );

	vec3 g1 = textureGrad( normalmap_a_sampler, uv1, duvdx, duvdy ).rgb;
	vec3 g2 = textureGrad( normalmap_a_sampler, uv2, duvdx, duvdy ).rgb;
	vec3 g3 = textureGrad( normalmap_a_sampler, uv3, duvdx, duvdy ).rgb;

	vec3 g = w1*g1 + w2*g2 + w3*g3 - vec3( 0.5 );
	g = g * inversesqrt( w1*w1 + w2*w2 + w3*w3 );
	g = g + vec3( 0.5 );
	
	
	vec3 text = vec3(
		texture( normalmap_a_sampler, vec2( g.r, 0.0 ) ).r
	,	texture( normalmap_a_sampler, vec2( g.g, 0.0 ) ).g
	,	texture( normalmap_a_sampler, vec2( g.b, 0.0 ) ).b
	) ;
	vec3 text2 = vec3(
		texture( normalmap_a_sampler, vec2( g.r, 0.0 ) ).r
	,	texture( normalmap_a_sampler, vec2( g.g, 0.0 ) ).g
	,	texture( normalmap_a_sampler, vec2( g.b, 0.0 ) ).b
	) ;
	text *= 0.75;
	text2 *= 0.25;
	text += text2;
	return text;
}
void fragment() {
	//vec4 albedo_tex = texture(texture_albedo,base_uv);
	//ALBEDO = albedo.rgb * albedo_tex.rgb;
	ALBEDO = albedo.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	//vec3 orign = texture(texture_normal,base_uv).rgb;
	
	vec2	uv_offset 					 = sampler_direction * TIME;
	vec2 	uv_sampler_uv 				 = UV * uv_sampler_scale + uv_offset;
	vec2	uv_sampler_uv_offset 		 = uv_sampler_strength * texture(uv_sampler, uv_sampler_uv).rg * 2.0 - 1.0;
	vec2 	uv 							 = UV + uv_sampler_uv_offset;

	
	// Normalmap:
	vec3 	normalmap					 = texture(normalmap_a_sampler, uv + uv_offset*4.0).rgb * 0.75;		// 75 % sampler A
			normalmap 					+= texture(normalmap_b_sampler, uv + uv_offset).rgb * 0.25;			// 25 % sampler B
	NORMALMAP = by_example_procedural_noise(uv);
	NORMALMAP_DEPTH = normal_scale;
	vec3 unpacked_normal = NORMALMAP;
	unpacked_normal.xy = unpacked_normal.xy * 2.0 - 1.0;
	unpacked_normal.z = sqrt(max(0.0, 1.0 - dot(unpacked_normal.xy, unpacked_normal.xy)));
	vec3 ref_normal = normalize( mix(NORMAL,TANGENT * unpacked_normal.x + BINORMAL * unpacked_normal.y + NORMAL * unpacked_normal.z,NORMALMAP_DEPTH) );
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy * refraction;
	//float ref_amount = 1.0 - albedo.a * albedo_tex.a;
	float ref_amount = 1.0 - albedo.a;
	EMISSION += textureLod(SCREEN_TEXTURE,ref_ofs,ROUGHNESS * 8.0).rgb * ref_amount;
	ALBEDO *= 1.0 - ref_amount;
	//ALPHA = 1.0;
	float depth_tex = textureLod(DEPTH_TEXTURE,SCREEN_UV,0.0).r;
	vec4 world_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV*2.0-1.0,depth_tex*2.0-1.0,1.0);
	world_pos.xyz/=world_pos.w;
	ALPHA*=clamp(1.0-smoothstep(world_pos.z+proximity_fade_distance,world_pos.z,VERTEX.z),0.0,1.0);

	float depth = texture(DEPTH_TEXTURE, SCREEN_UV).r;
	depth = depth * 2.0 - 1.0;
	depth = PROJECTION_MATRIX[3][2] / (depth + PROJECTION_MATRIX[2][2]);
	depth = depth + VERTEX.z;
	depth = exp(-depth * beer_factor);
	depth = 1.0 - depth;

	float waterDepth = clamp(depth / _DepthMaxDistance, 0.0, 2.0) * _DepthFactor;
	vec4 waterColor = mix(_DepthGradientShallow, albedo, waterDepth);
	
	ALBEDO = waterColor.rgb;
	
	
	if (IsRaining)
	{
		vec2 pat = texture(pattern, UV * uv1_scale / 5.0).rg;
		float grad = pat.r;
		float fct_time = fract(TIME + pat.g);
		float fade = (1.0 - fct_time / fadeout);
		grad -= fct_time;
		grad /= ring_width;
		grad = clamp(grad, 0.0, 1.0);
		float ring = smoothstep(0.0, 1.0, min(grad, (1.0 - grad)) * 2.0);
		
		ring *= fade;
		ring = clamp(ring, 0.0, 1.0);
		
		ALBEDO = mix(waterColor, ring_color, ring).rgb;
		
		
		vec3 ringn = texture(pattern, UV * uv1_scale / 5.0).rgb;
		
		//ALBEDO = mix(orign,ringn, ring);
		NORMALMAP = mix(by_example_procedural_noise(uv),ringn, ring);
	}
	
}
"

[resource]
shader = SubResource( 6 )
shader_param/IsRaining = true
shader_param/albedo = Color( 0.690196, 0.670588, 0.670588, 1 )
shader_param/ring_color = Color( 0.862745, 0.964706, 1, 1 )
shader_param/_DepthGradientShallow = Color( 0.694118, 0.694118, 0.694118, 1 )
shader_param/specular = 0.63
shader_param/metallic = 1.0
shader_param/proximity_fade_distance = 2.86
shader_param/roughness = 0.488
shader_param/refraction = 0.0
shader_param/normal_scale = 0.161
shader_param/beer_factor = 0.078
shader_param/_DepthMaxDistance = 1.651
shader_param/_DepthFactor = 9.326
shader_param/ring_width = 0.05
shader_param/fadeout = 0.266
shader_param/uv_sampler_scale = Vector2( 0.25, 0.25 )
shader_param/uv_sampler_strength = -0.321
shader_param/sampler_direction = Vector2( 0, -0.05 )
shader_param/uv1_scale = Vector2( 40, 40 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/pattern = ExtResource( 2 )
shader_param/uv_sampler = ExtResource( 3 )
shader_param/normalmap_a_sampler = ExtResource( 3 )
shader_param/normalmap_b_sampler = ExtResource( 1 )

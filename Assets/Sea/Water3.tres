[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[ext_resource path="res://Assets/Sea/bwr_caustic.png" type="Texture" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode specular_schlick_ggx, unshaded, cull_back, async_visible;//

uniform float specular = 0.5;
uniform float metallic = 0;
uniform float proximity_fade_distance = 0.85;
uniform float roughness : hint_range(0,1) = 1;
uniform float alpha_clip : hint_range(0,1) = 0.85;
uniform float point_size : hint_range(0,128) = 1;
uniform vec4 transmission : hint_color;
uniform sampler2D texture_transmission : hint_black;
uniform vec3 uv1_scale = vec3(1,1,1);
uniform vec3 uv1_offset = vec3(0,0,0);
uniform vec3 uv2_scale = vec3(1,1,1);
uniform vec3 uv2_offset = vec3(0,0,0);

uniform vec4 tint_color : hint_color = vec4( 0.3, 0.4, 0.45, 1.0);
uniform sampler2D caustics : hint_white;
uniform float slowdown : hint_range( 0.1, 10.0, 0.1 ) = 5.0;
uniform float time_caust : hint_range( 0.01, 1.0, 0.01 ) = 0.13;
uniform float caust_form : hint_range( 0.01, 1.0, 0.01 ) = 0.15;
uniform float tile: hint_range( 0.1, 64.0, 0.1 ) = 4.0;

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}

void fragment() {

// Caustics
	float caustics_form = texture(caustics , UV * (tile + sin(TIME / slowdown) * time_caust )).r;//
	vec2 caustics_uv =  UV * (tile + cos(TIME / slowdown) * time_caust ) + caustics_form * caust_form ;
	float caustics_final = texture(caustics, caustics_uv).r;
	
	ALPHA = min(SCREEN_UV.y + 0.5, 1.0 ) * tint_color.a;
	
	vec2 base_uv = UV;

	//ALBEDO = albedo.rgb * tint_color.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	float opacity = min(SCREEN_UV.y + 0.5, 1.0 ) * tint_color.a;
	float depth_tex = textureLod(DEPTH_TEXTURE,SCREEN_UV,0.0).r;
	vec4 world_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV*2.0-1.0,depth_tex*2.0-1.0,1.0);
	world_pos.xyz/=world_pos.w;
	opacity*=clamp(1.0-smoothstep(world_pos.z+proximity_fade_distance,world_pos.z,VERTEX.z),0.0,1.0);
	vec3 transmission_tex = texture(texture_transmission,base_uv).rgb;
	TRANSMISSION = (transmission.rgb+transmission_tex);
 
	ALPHA = opacity;
	ALBEDO = (1.0-SCREEN_UV.y) * caustics_final * tint_color.rgb  / opacity;
	// skip drawing all pixels below this limit
	if (opacity < 0.001f)
		discard;
}"

[resource]
shader = SubResource( 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/proximity_fade_distance = 20.0
shader_param/roughness = 1.0
shader_param/alpha_clip = 0.85
shader_param/point_size = 1.0
shader_param/transmission = null
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/tint_color = Color( 0.317647, 0.396078, 0.439216, 0.643137 )
shader_param/slowdown = 6.5
shader_param/time_caust = 0.1
shader_param/caust_form = 0.18
shader_param/tile = 23.9
shader_param/caustics = ExtResource( 1 )

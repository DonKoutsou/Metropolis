[gd_resource type="ShaderMaterial" load_steps=6 format=2]

[ext_resource path="res://Assets/Clutter/Vegetation/fern_01_norm.jpg" type="Texture" id=1]
[ext_resource path="res://Assets/Clutter/Vegetation/fern_01.png" type="Texture" id=2]

[sub_resource type="Shader" id=1]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.3.stable.mono's SpatialMaterial.
/*
void light() and corresponding variables and functions by (c) CaptainProton42's 
Flexible Toon Shader under the MIT license 

the rest was added by kmitt91; void fragment() + void vertex() and corresponding variables
*/


shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform sampler2D noise_texture : hint_black; 

uniform float strength = 1.0;
uniform float speed = 1.0;

void vertex() {
	
	vec2 scaled_uv = UV * vec2(0.5);
	float noise = texture(noise_texture, scaled_uv + vec2(TIME * speed, 0.0)).r;
	
	float displacement = (noise * 2.0 - 0.8) * strength;

		displacement *=(1.0f - UV.y);
		vec3 res;
		if (NORMAL.x * displacement > 0.0)
			res = vec3(NORMAL.x * displacement , res.y, res.z);
		if (NORMAL.y * displacement > 0.0)
			res = vec3(res.x, (NORMAL.y * displacement) , res.z);
		if (NORMAL.z * displacement > 0.0)
			res = vec3(res.x, res.y , NORMAL.z * displacement);

		VERTEX += res;
		//else
			//VERTEX += vec3(displacement, 0.0, displacement);

		
	
}




void fragment() {
	vec2 base_uv = UV*uv1_scale.xy+uv1_offset.xy;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	NORMALMAP = texture(texture_normal,base_uv).rgb;
	NORMALMAP_DEPTH = normal_scale;
	ALPHA = albedo_tex.a;
}
"

[sub_resource type="OpenSimplexNoise" id=3]

[sub_resource type="NoiseTexture" id=2]
seamless = true
noise = SubResource( 3 )

[resource]
shader = SubResource( 1 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/normal_scale = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/strength = 0.2
shader_param/speed = 0.2
shader_param/texture_albedo = ExtResource( 2 )
shader_param/texture_normal = ExtResource( 1 )
shader_param/noise_texture = SubResource( 2 )
